name: Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.2'

      - name: Run tests
        run: |
          echo "Running all tests with extended timeout for CI..."
          go test -timeout=30s -tags=integration ./... -p=1 -json 2>&1 | tee test_output.json | jq -r 'select(.Action == "pass" or .Action == "fail" or .Action == "skip" or .Action == "build-output") | if .Action == "build-output" then ("BUILD ERROR: " + .Output) else (select(.Test) | "\(.Action | ascii_upcase): \(.Test)") end' 2>/dev/null | grep -v "^$$" | grep -E "FAIL|SKIP|BUILD ERROR" || echo "Tests completed"
          if grep -q '"Action":"fail"' test_output.json 2>/dev/null || grep -q "panic: test timed out" test_output.json 2>/dev/null; then
            if grep -q "panic: test timed out" test_output.json; then
              echo "TIMEOUTS:"
              jq -r 'select(.Output and (.Output | contains("panic: test timed out"))) | .Test' test_output.json 2>/dev/null | sort -u | sed 's/^/  /' || true
            fi
            exit 1
          fi
          echo "All tests passed"
          rm -f test_output.json

      - name: Check GoReleaser config
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build snapshot
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: build --snapshot --clean --single-target
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}